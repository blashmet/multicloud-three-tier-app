AWSTemplateFormatVersion: '2010-09-09'

Description: Terraform State Resources

Parameters:
  
  FunctionName:
    Default: ''
    Description: (optional) Name for the S3 bucket
    Type: String
  
  Handler:
    Default: ''
    Description: (optional) Name for the DynamoDB table
    Type: String


Resources:

    
    
  SampleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowAllUsersToListAccounts
            Effect: Allow
            Action:
              - s3:Li
              - s3:ListUsers
              - s3:GetAccountSummary
            Resource: "*"
    
    
    S3AccessForLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          ManagedPolicyArns:
            - !Ref SampleManagedPolicy
    
    
    
    
    
    
    
    Type: AWS::Lambda::Function
      Properties: 
        Code: 
          ZipFile:  |
            #!/usr/bin/env python
            # -*- coding: utf-8 -*-

            import json
            import boto3
            from botocore.vendored import requests


            def lambda_handler(event, context):
                try:
                    bucket = event['ResourceProperties']['BucketName']

                    if event['RequestType'] == 'Delete':
                        s3 = boto3.resource('s3')
                        bucket = s3.Bucket(bucket)
                        for obj in bucket.objects.filter():
                            s3.Object(bucket.name, obj.key).delete()

                    sendResponseCfn(event, context, "SUCCESS")
                except Exception as e:
                    print(e)
                    sendResponseCfn(event, context, "FAILED")


            def sendResponseCfn(event, context, responseStatus):
                response_body = {'Status': responseStatus,
                                'Reason': 'Log stream name: ' + context.log_stream_name,
                                'PhysicalResourceId': context.log_stream_name,
                                'StackId': event['StackId'],
                                'RequestId': event['RequestId'],
                                'LogicalResourceId': event['LogicalResourceId'],
                                'Data': json.loads("{}")}

                requests.put(event['ResponseURL'], data=json.dumps(response_body))

        Environment: 
          Environment
        FunctionName: String
        Handler: String
        Layers: 
          - String
        MemorySize: Integer
        ReservedConcurrentExecutions: Integer
        Role: String
        Runtime: String
        TracingConfig: 
          Mode: Active